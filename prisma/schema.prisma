// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model AcademicSemester{
  id String @id @default(uuid())
  year Int 
  title String
  code String
  isCurrent Boolean? @default(false)
  startMonth String
  endMonth String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students Student[]
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]
  studentSemesterPayments StudentSemesterPayment[]
  studentEnrolledCourses StudentEnrolledCourse[]
  semesterRegistrations SemesterRegistration[]
  @@map("academic_semester")
}
model AcademicFaculty{
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students Student[]
  faculty Faculty[]
  academicDepartment AcademicDepartment[]
  @@map("academic_faculty")
}
model AcademicDepartment{
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students Student[]
  facults Faculty[]
  academicFacultyId String
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
  offeredCourses OfferedCourse[]
  @@map("academic_department")
}

model Student{
  id String @id @default(uuid())
  studentId String
  firstName String
  middeName String
  lastName String
  profileImage String?
  email String
  contactNo String
  gender String
  bloodgroup String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicSemesterId String
  academcSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
  academicFacultyId String
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
  studentSemesterRegistrations StudentSemesterRegistration[]
   studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
   studentSemesterPayments StudentSemesterPayment[]
  academicDepartmentId String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])
  studentAcademicInfos StudentAcademicInfo[]
  studentEnrolledCourses StudentEnrolledCourse[]
   studentEnrolledCourseMarks StudentEnrolledCourseMark[]
  @@map("student")
}

model Faculty{
  id String @id @default(uuid())
  facultyId String
  firstName String
  middeName String?
  lastName String
  profileImage String?
  email String
  contactNo String
  gender String
  bloodgroup String
  designation String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicFacultyId String
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
  academicDepartmentId String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])
  faculties courseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]
  @@map("faculty")
}
model Building{
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms Room[]
  @@map("buildings")

}
model Room {
  id String @id  @default(uuid())
  roomNumber String
  floor String
   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  buildingId String
  bulding Building @relation(fields: [buildingId],references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]
  @@map("rooms")
}
model Course{
  id String @id @default(uuid())
  title String 
  code String
  credits Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course courseFaculty[]
  studentEnrolledCourses StudentEnrolledCourse[]
  @@map("courses")
 preRequisite CourseToPrerequisite[] @relation("courseToPreRequisite")
 preRequisiteFor CourseToPrerequisite[] @relation("preRequisiteToCourse")
 offeredCourses OfferedCourse[]
}
model CourseToPrerequisite {
  courseID String
  preRequisiteID String
  course Course @relation(fields: [courseID],references: [id],name: "courseToPreRequisite")
  preRequisite Course @relation(fields: [preRequisiteID],references: [id],name: "preRequisiteToCourse")
  @@id([courseID,preRequisiteID])
}
model courseFaculty {
  courseID String
  course Course @relation(fields: [courseID],references: [id])
  facultyId String
  facuties Faculty @relation(fields: [facultyId],references: [id])
  @@id([courseID,facultyId])
  @@map("course_faculties")
}
model SemesterRegistration{
  id String @id @default(uuid())
  startDate DateTime
  endDate DateTime
  status SemesterRegistrationStatus @default(UPCOMING)
  minCredit Int @default(0)
  maxCredit Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicSemesterId String
  academicsemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
  offeredCourses OfferedCourse[]
  offeredCourseSections OfferedCourseSection []
  offeredCourseClassSchedules OfferedCourseClassSchedule[]
  studentSemesterRegistrations StudentSemesterRegistration []
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  @@map("semester_registration")
}
model OfferedCourse {
  id String @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseID String
  course Course @relation(fields: [courseID], references: [id])
  academicDepartmentId String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId],references: [id])
  offeredCourseSections OfferedCourseSection []
   studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  @@map("offered_course")
}

model OfferedCourseSection {
 id String @id @default(uuid())
 title String
 maxCapacity Int
 currentlyEnrolledStudent Int @default(0)
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 offeredCourseId String
 offerdCourse OfferedCourse @relation(fields: [offeredCourseId],references: [id])
 semesterRegistrationId String
 semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId],references: [id])
 offeredCourseClassSchedules OfferedCourseClassSchedule[]
 studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
 @@map("offerd_course_section")
}
model OfferedCourseClassSchedule {
  id                     String               @id @default(uuid())
  startTime              String
  endTime                String
  dayOfWeek              WeekDays             @default(SATURDAY)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedules")
}

model StudentSemesterRegistration {
  id String @id @default(uuid())
  isConfirmed Boolean? @default(false)
  totalCreditsTaken Int? @default(0)
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId],references: [id])
  studentId String 
  student Student @relation(fields: [studentId],references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@map("student_semester_registration")

}
model StudentSemesterRegistrationCourse {
  semesterRegistrationId String 
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId],references: [id])
  studentId String 
  student Student @relation(fields: [studentId],references: [id])
  offeredCourseId String 
  offeredCourse OfferedCourse @relation(fields: [offeredCourseId],references: [id])
  offeredCourseSectionId String
  offeredCourseSection OfferedCourseSection @relation(fields: [offeredCourseSectionId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([semesterRegistrationId,studentId,offeredCourseId])
  @@map("student_semester_registration_course")
}
model StudentEnrolledCourse {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student Student @relation(fields: [studentId],references: [id])
  courseId String
  course Course @relation(fields: [courseId],references: [id])
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
  grade String?
  point Float @default(0)
  totalMarks Int @default(0)
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]
  status StudentEnrolledCourseStatus @default(ONGOING)
@@map("student_enrolled_course")

}
model StudentEnrolledCourseMark {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student Student @relation(fields: [studentId],references: [id])
  studentEnrolledCourseId  String
  studentEnrolledCourse StudentEnrolledCourse @relation(fields: [studentEnrolledCourseId],references: [id])
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
  grade String?
  marks Int? @default(0)
  examType ExamType @default(MIDTERM)
  @@map("student_enrolled_course_mark")
}
model StudentSemesterPayment {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student Student @relation(fields: [studentId],references: [id])
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
  fullPaymentAmount Int? @default(0)
  partialPaymentAmount Int? @default(0)
  totalDueAmount Int? @default(0)
  totalPaidAmount Int? @default(0)
  paymentStatus PaymentStatus @default(PENDING)
  @@map("student_semester_payment")
}
model StudentAcademicInfo {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student Student @relation(fields: [studentId],references: [id])
  totalCompletedCredit Int? @default(0)
  cgpa Float? @default(0)
  @@map("student_academic_info")
}
enum StudentEnrolledCourseStatus {
    ONGOING
    COMPLETED
    WITHDRAWN
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
enum ExamType {
  MIDTERM
  FINAL
}
enum PaymentStatus {
  PENDING
  PARTIAL_PAID
  FULL_PAID
}