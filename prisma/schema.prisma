// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model AcademicSemester{
  id String @id @default(uuid())
  year Int 
  title String
  code String
  startMonth String
  endMonth String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students Student[]
  semesterRegistrations SemesterRegistration[]
  @@map("academic_semester")
}
model AcademicFaculty{
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students Student[]
  faculty Faculty[]
  academicDepartment AcademicDepartment[]
  @@map("academic_faculty")
}
model AcademicDepartment{
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students Student[]
  facults Faculty[]
  academicFacultyId String
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
  offeredCourses OfferedCourse[]
  @@map("academic_department")
}

model Student{
  id String @id @default(uuid())
  studentId String
  firstName String
  middeName String
  lastName String
  profileImage String
  email String
  contactNo String
  gender String
  bloodgroup String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicSemesterId String
  academcSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
  academicFacultyId String
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
  academicDepartmentId String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])
  @@map("student")
}

model Faculty{
  id String @id @default(uuid())
  facultyId String
  firstName String
  middeName String
  lastName String
  profileImage String
  email String
  contactNo String
  gender String
  bloodgroup String
  designation String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicFacultyId String
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
  academicDepartmentId String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])
  faculties courseFaculty[]
  @@map("faculty")
}
model Building{
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms Room[]
  @@map("buildings")

}
model Room {
  id String @id  @default(uuid())
  roomNumber String
  floor String
   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  buildingId String
  bulding Building @relation(fields: [buildingId],references: [id])
  @@map("rooms")
}
model Course{
  id String @id @default(uuid())
  title String 
  code String
  credits Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course courseFaculty[]
  @@map("courses")
 preRequisite CourseToPrerequisite[] @relation("courseToPreRequisite")
 preRequisiteFor CourseToPrerequisite[] @relation("preRequisiteToCourse")
 offeredCourses OfferedCourse[]
}
model CourseToPrerequisite {
  courseID String
  preRequisiteID String
  course Course @relation(fields: [courseID],references: [id],name: "courseToPreRequisite")
  preRequisite Course @relation(fields: [preRequisiteID],references: [id],name: "preRequisiteToCourse")
  @@id([courseID,preRequisiteID])
}
model courseFaculty {
  courseID String
  course Course @relation(fields: [courseID],references: [id])
  facultyId String
  facuties Faculty @relation(fields: [facultyId],references: [id])
  @@id([courseID,facultyId])
  @@map("course_faculties")
}
model SemesterRegistration{
  id String @id @default(uuid())
  startDate DateTime
  endDate DateTime
  status SemesterRegistrationStatus @default(UPCOMING)
  minCredit Int @default(0)
  maxCredit Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicSemesterId String
  academicsemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
  offeredCourses OfferedCourse[]
  offeredCourseSections OfferedCourseSection []
  @@map("semester_registration")
}
enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
model OfferedCourse {
  id String @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseID String
  course Course @relation(fields: [courseID], references: [id])
  academicDepartmentId String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId],references: [id])
  offeredCourseSections OfferedCourseSection []
  @@map("offered_course")
}
model OfferedCourseSection {
id String @id @default(uuid())
title String
maxCapacity Int
currentlyEnrolledStudent Int @default(0)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
offeredCourseId String
offerdCourse OfferedCourse @relation(fields: [offeredCourseId],references: [id])
semesterRegistrationId String
semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId],references: [id])
@@map("offerd_course_section")

}